#include <stdint.h>

/*
 * status
 */

#define PID_CALC_TYPE float
#define PID_DATA_INPUT_TYPE int32_t

enum PID_MODE_TYPE
{
	PID_MODE_NO_REGULATION,
	PID_MODE_P_REGULATOR,
	PID_MODE_I_REGULATOR,
	PID_MODE_PI_REGULATOR,
	PID_MODE_D_REGULATOR,
	PID_MODE_PD_REGULATOR,
	PID_MODE_ID_REGULATOR,
	PID_MODE_PID_REGULATOR,
	PID_NUMBER_OF_MODES
};

enum PID_RETURN_STATUS
{
	PID_OK,
	PID_ERR
};

enum PID_CHECK_TIME
{
	PID_CHECK_TIME_OK,
	PID_CHECK_TIME_WAIT
};

typedef struct
{
	PID_CALC_TYPE k;
	PID_CALC_TYPE ti;
	PID_CALC_TYPE td;

	PID_CALC_TYPE integral;
	PID_CALC_TYPE prev_diff;

	enum PID_MODE_TYPE mode;

	PID_DATA_INPUT_TYPE delay;
	PID_DATA_INPUT_TYPE next_check;

	PID_DATA_INPUT_TYPE* clock_register;
	PID_DATA_INPUT_TYPE* setpoint;
	PID_DATA_INPUT_TYPE* output;
	PID_DATA_INPUT_TYPE* measure;
}PID;

enum PID_RETURN_STATUS pidInit(PID* pid, PID_DATA_INPUT_TYPE* setpoint, PID_DATA_INPUT_TYPE* measure, PID_DATA_INPUT_TYPE* output, PID_DATA_INPUT_TYPE* clock_register);

enum PID_RETURN_STATUS pidCalculate(PID* pid);

enum PID_CHECK_TIME pidCheckTime(PID* pid);

enum PID_RETURN_STATUS pidSetMode(PID* pid, enum PID_MODE_TYPE new_mode);

enum PID_RETURN_STATUS pidSetDelay(PID* pid, PID_DATA_INPUT_TYPE new_delay);

enum PID_RETURN_STATUS pidSetP(PID* pid, PID_CALC_TYPE new_k);

enum PID_RETURN_STATUS pidSetTi(PID* pid, PID_CALC_TYPE new_ti);

enum PID_RETURN_STATUS pidSetTd(PID* pid, PID_CALC_TYPE new_td);
